/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.wiu.gofish;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.JButton;
import javax.swing.JLabel;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 *
 * @author Alex
 */
public class MainGui extends javax.swing.JFrame {
       
       //Game game = Controller.getGame();
       ArrayList<JButton> pButtons = new ArrayList<JButton>();
       ArrayList<JLabel> pLabels = new ArrayList<JLabel>();
       String findMatch;
       String url;
       String currentPlayer;
       DeprAskCard g;
       Card card;
      // game.startGame();
    /**
     * Creates new form MainGui
     */
    public MainGui() {
       initComponents();
       //Player player1 = new Player("Player1");
       //Ai ai = new Ai();
       //populateButtons();
       //populateLabels();
       //game.startGame();
       //setButtonIcon();
       //setLabelText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        closeButtonGUI = new javax.swing.JButton();
        resetButtonGUI = new javax.swing.JButton();
        menuButtonGUI = new javax.swing.JButton();
        pButton8 = new javax.swing.JButton();
        pButton12 = new javax.swing.JButton();
        pButton11 = new javax.swing.JButton();
        pButton10 = new javax.swing.JButton();
        pButton7 = new javax.swing.JButton();
        pButton6 = new javax.swing.JButton();
        pButton5 = new javax.swing.JButton();
        pButton4 = new javax.swing.JButton();
        pButton3 = new javax.swing.JButton();
        pButton2 = new javax.swing.JButton();
        deckButton = new javax.swing.JButton();
        pButton13 = new javax.swing.JButton();
        pButton1 = new javax.swing.JButton();
        pButton9 = new javax.swing.JButton();
        pAsk = new javax.swing.JButton();
        jAsk = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        deckCount = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        viewPlayerTurn = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        pLabel1 = new javax.swing.JLabel();
        pLabel6 = new javax.swing.JLabel();
        pLabel3 = new javax.swing.JLabel();
        pLabel13 = new javax.swing.JLabel();
        pLabel2 = new javax.swing.JLabel();
        pLabel5 = new javax.swing.JLabel();
        pLabel4 = new javax.swing.JLabel();
        pLabel12 = new javax.swing.JLabel();
        pLabel11 = new javax.swing.JLabel();
        pLabel10 = new javax.swing.JLabel();
        pLabel9 = new javax.swing.JLabel();
        pLabel8 = new javax.swing.JLabel();
        pLabel7 = new javax.swing.JLabel();
        pInfo = new javax.swing.JLabel();
        c1Fish = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        closeButtonGUI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/X_Button.png"))); // NOI18N
        closeButtonGUI.setBorderPainted(false);
        closeButtonGUI.setContentAreaFilled(false);
        closeButtonGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonGUIActionPerformed(evt);
            }
        });
        jPanel1.add(closeButtonGUI, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 0, 40, 40));

        resetButtonGUI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/Reset Button.png"))); // NOI18N
        resetButtonGUI.setToolTipText("");
        resetButtonGUI.setBorderPainted(false);
        resetButtonGUI.setContentAreaFilled(false);
        resetButtonGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonGUIActionPerformed(evt);
            }
        });
        jPanel1.add(resetButtonGUI, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 40, 40, 40));

        menuButtonGUI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/Menu_Button.png"))); // NOI18N
        menuButtonGUI.setBorderPainted(false);
        menuButtonGUI.setContentAreaFilled(false);
        menuButtonGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonGUIActionPerformed(evt);
            }
        });
        jPanel1.add(menuButtonGUI, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 80, 40, 40));

        pButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/1h.png"))); // NOI18N
        pButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 510, 70, 90));

        pButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton12ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 510, 70, 90));

        pButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton11ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 510, 70, 90));

        pButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton10ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 510, 70, 90));

        pButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/11h.png"))); // NOI18N
        pButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 510, 70, 90));

        pButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/10c.png"))); // NOI18N
        pButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 510, 70, 90));

        pButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 510, 70, 90));

        pButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 510, 70, 90));

        pButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 510, 70, 90));

        pButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 510, 70, 90));

        deckButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        deckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deckButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 300, 70, 90));

        pButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton13ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 510, 70, 90));

        pButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 510, 70, 90));

        pButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton9ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 510, 70, 90));

        pAsk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pAskActionPerformed(evt);
            }
        });
        jPanel1.add(pAsk, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 180, 70, 90));

        jAsk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAskActionPerformed(evt);
            }
        });
        jPanel1.add(jAsk, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 370, 70, 90));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 70, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 70, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 70, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Score: 0");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 460, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 170, -1, -1));

        deckCount.setForeground(new java.awt.Color(255, 255, 255));
        deckCount.setText("Deck Count: 45");
        jPanel1.add(deckCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 270, -1, -1));

        jButton1.setText("GO FISH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 640, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Score: 0");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 170, -1, -1));

        viewPlayerTurn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        viewPlayerTurn.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(viewPlayerTurn, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 350, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("NAME");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 460, -1, -1));

        pLabel1.setForeground(new java.awt.Color(255, 255, 255));
        pLabel1.setText("3");
        jPanel1.add(pLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 490, 10, -1));

        pLabel6.setForeground(new java.awt.Color(255, 255, 255));
        pLabel6.setText("3");
        jPanel1.add(pLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 490, 10, -1));

        pLabel3.setForeground(new java.awt.Color(255, 255, 255));
        pLabel3.setText("3");
        jPanel1.add(pLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 490, 10, -1));

        pLabel13.setForeground(new java.awt.Color(255, 255, 255));
        pLabel13.setText("2");
        jPanel1.add(pLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 490, -1, -1));

        pLabel2.setForeground(new java.awt.Color(255, 255, 255));
        pLabel2.setText("3");
        jPanel1.add(pLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 490, 10, -1));

        pLabel5.setForeground(new java.awt.Color(255, 255, 255));
        pLabel5.setText("2");
        jPanel1.add(pLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 490, -1, -1));

        pLabel4.setForeground(new java.awt.Color(255, 255, 255));
        pLabel4.setText("2");
        jPanel1.add(pLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 490, -1, -1));

        pLabel12.setForeground(new java.awt.Color(255, 255, 255));
        pLabel12.setText("2");
        jPanel1.add(pLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 490, -1, -1));

        pLabel11.setForeground(new java.awt.Color(255, 255, 255));
        pLabel11.setText("2");
        jPanel1.add(pLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 490, -1, -1));

        pLabel10.setForeground(new java.awt.Color(255, 255, 255));
        pLabel10.setText("2");
        jPanel1.add(pLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 490, -1, -1));

        pLabel9.setForeground(new java.awt.Color(255, 255, 255));
        pLabel9.setText("2");
        jPanel1.add(pLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 490, -1, -1));

        pLabel8.setForeground(new java.awt.Color(255, 255, 255));
        pLabel8.setText("2");
        jPanel1.add(pLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 490, -1, -1));

        pLabel7.setForeground(new java.awt.Color(255, 255, 255));
        pLabel7.setText("2");
        jPanel1.add(pLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 490, -1, -1));

        pInfo.setText("jLabel5");
        jPanel1.add(pInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, -1, -1));

        c1Fish.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        c1Fish.setForeground(new java.awt.Color(255, 255, 255));
        c1Fish.setText("Go Fish!");
        jPanel1.add(c1Fish, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 210, -1, 20));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 330, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/Gofishbackground.png"))); // NOI18N
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Set the urlIcon  of each button associated with the cards in player hands accordingly
    public void setButtonIcon(){
        ArrayList<String> img = new ArrayList<>();
        //img = Controller.getGame().getImg();
        img = Controller.getGame().getImg();
        int i;
        for (i = 0; i<img.size();i++){
            pButtons.get(i).setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + img.get(i)))); 
        }
        for(i = i;i<13;i++){
            pButtons.get(i).setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/Gofishbackground.png")));
        }
    
    }
    //Set the label each text associated with the player hand  accordingly
    public void setLabelText(){
        ArrayList<Integer> freq = new ArrayList<>();
        freq = Controller.getGame().getFreq();
        int i;
        for (i=0;i<freq.size();i++){
            pLabels.get(i).setText("" + freq.get(i));
        }
        for (i=i;i<13;i++){
            pLabels.get(i).setText("");
        }
    }
    public void setPoints(){//set points only does player atm, add for ai
        ArrayList<Integer> points = new ArrayList<>();
        for(int i =0;i<Controller.getGame().getPlayerCount();i++){
            points.add(Controller.getGame().getPlayer(i).getScore());
        }
        jLabel7.setText("Score: " + points.get(0));
    }
    public void setViewPlayerTurn(){
        this.viewPlayerTurn.setText("Current Turn: "+ Controller.getGame().getCurrentTurnName());
    }
    
    public void setDeckCount(){
        this.deckCount.setText("Deck Count: "+ Controller.getGame().getDeck().getSize());
    
    }
    public void refreshPlayerGUI(){
        setButtonIcon();
        setLabelText();
        setPoints();
        setViewPlayerTurn();
        setDeckCount();
    }
    
    //this is run once, at the start of the game OR maybe reset of the game
    public void Init(){
        
        
        setVisible(true);
        populateButtons();
        populateLabels(); 
        populateDropdown();
        
        setButtonIcon();
        setLabelText();
        setPoints();
        setViewPlayerTurn();
        setDeckCount();    
    
    }

    //add buttons to array
    public void populateButtons(){
        pButtons.add(pButton7);//0
        pButtons.add(pButton6);//1
        pButtons.add(pButton8);//2
        pButtons.add(pButton5);//3
        pButtons.add(pButton9);//4
        pButtons.add(pButton4);//5
        pButtons.add(pButton10);//6
        pButtons.add(pButton3);//7
        pButtons.add(pButton11);//8
        pButtons.add(pButton2);//9
        pButtons.add(pButton12);//10
        pButtons.add(pButton1);//11
        pButtons.add(pButton13);//12
    }
    //add labels to array
    public void populateLabels(){
        pLabels.add(pLabel7);
        pLabels.add(pLabel6);
        pLabels.add(pLabel8);
        pLabels.add(pLabel5);
        pLabels.add(pLabel9);
        pLabels.add(pLabel4);
        pLabels.add(pLabel10);
        pLabels.add(pLabel3);
        pLabels.add(pLabel11);
        pLabels.add(pLabel2);
        pLabels.add(pLabel12);
        pLabels.add(pLabel1);
        pLabels.add(pLabel13);
    }
    
    //Listener for next turn button in AskResult class
    class NextTurnListener implements ActionListener{
        @Override
        public void actionPerformed(ActionEvent e){
            System.out.println("Next turn button was pressed");
            if(findMatch.equals("Go Fish")){
                Controller.getGame().setNextPlayerTurn();
                //refreshPlayerGUI();
            }
            System.out.println("nextTurn(); or at least what would've what happened if I was coded");//next turn function goes here
            System.out.println(currentPlayer);
        }
    }
    //Listener for ask button in AskCard class
    public void showInfo(){
        /* broke this up into a separate method, commenting out incase it's needed later
        ArrayList<String> players = Controller.getGame().getCurrentPlayers();
        String [] model = new String[players.size()-1];//minus 1 to remove player name
        for(int i = 0;i<players.size()-1;i++){//starts at 1 to skip player name
            model[i] = players.get(i+1);
        }
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(model));*/
        
        
        
        pInfo.setText(currentPlayer +" is asking");
        jAsk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + url)));
    }
    
    //populates the dropdown menu for asking options
    public void populateDropdown(){
        ArrayList<String> players = Controller.getGame().getCurrentPlayers();
        String [] model = new String[players.size()-1];//minus 1 to remove player name
        for(int i = 0;i<players.size()-1;i++){//starts at 1 to skip player name
            model[i] = players.get(i+1);
        }
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(model));           
    }
    class AskCardListener implements ActionListener{
        @Override
        public void actionPerformed(ActionEvent e){
            String choice = g.getChoice();
            System.out.println(choice);
            findMatch = Controller.getGame().isMatch(card, choice);
            System.out.println(findMatch);
            Controller.getGame().checkHand();
            refreshPlayerGUI();
            g.dispose();
            AskResult g2 = new AskResult(choice, currentPlayer, url, findMatch);
            g2.setVisible(true);
            g2.addNextTurnButtonListener(new NextTurnListener());

        }
    }
    private void menuButtonGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonGUIActionPerformed
        // TODO add your handling code here:
        HelpScreen g = new HelpScreen();
        g.setVisible(true);
    }//GEN-LAST:event_menuButtonGUIActionPerformed

    private void resetButtonGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonGUIActionPerformed
        // TODO add your handling code here:
        MainGui g = new MainGui();
        g.setVisible(true);
        dispose();
        
        //prolly need to reset deck and hands later lol
    }//GEN-LAST:event_resetButtonGUIActionPerformed

    private void pButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton8ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        //img = game.getImg();
        img = Controller.getGame().getImg();
        if(img.size()>2){//prevent this button from triggering when there's no image for this button
            url = img.get(2);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton8ActionPerformed

    private void pButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton12ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        //img = game.getImg();
        img = Controller.getGame().getImg();
        if(img.size()>10){//prevent this button from triggering when there's no image for this button
            url = img.get(10);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton12ActionPerformed

    private void pButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton11ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        //img = game.getImg();
        img = Controller.getGame().getImg();
        if(img.size()>8){//prevent this button from triggering when there's no image for this button
            url = img.get(8);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton11ActionPerformed

    private void pButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton10ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        //img = game.getImg();
        img = Controller.getGame().getImg();
        if(img.size()>6){//prevent this button from triggering when there's no image for this button
            url = img.get(6);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton10ActionPerformed

    private void pButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton7ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        //img = game.getImg();
        img = Controller.getGame().getImg();
        if(img.size()>0){//prevent this button from triggering when there's no image for this button
            url = img.get(0);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton7ActionPerformed

    private void pButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton6ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        //img = game.getImg();
        img = Controller.getGame().getImg();
        if(img.size()>1){//prevent this button from triggering when there's no image for this button
            url = img.get(1);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton6ActionPerformed

    private void pButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton5ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        img = Controller.getGame().getImg();
        if(img.size()>3){//prevent this button from triggering when there's no image for this button
            url = img.get(3);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton5ActionPerformed

    private void pButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton4ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        img = Controller.getGame().getImg();
        if(img.size()>5){//prevent this button from triggering when there's no image for this button
            url = img.get(5);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton4ActionPerformed

    private void pButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton3ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        img = Controller.getGame().getImg();
        if(img.size()>7){//prevent this button from triggering when there's no image for this button
            url = img.get(7);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton3ActionPerformed

    private void pButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton2ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        img = Controller.getGame().getImg();
        if(img.size()>9){//prevent this button from triggering when there's no image for this button
            url = img.get(9);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton2ActionPerformed

    private void deckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deckButtonActionPerformed
        
        //if decksize is not equal to 0, set player to next and refresh UI
        if(Controller.getGame().getDeck().getSize()!=0){
            Controller.getGame().setNextPlayerTurn();
            refreshPlayerGUI();
            System.out.println("deck press");
        }
    }//GEN-LAST:event_deckButtonActionPerformed

    private void pButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton13ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        img = Controller.getGame().getImg();
        if(img.size()>12){//prevent this button from triggering when there's no image for this button
            url = img.get(12);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton13ActionPerformed

    private void pButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton1ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        img = Controller.getGame().getImg();
        if(img.size()>11){//prevent this button from triggering when there's no image for this button
            url = img.get(11);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton1ActionPerformed

    private void closeButtonGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonGUIActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeButtonGUIActionPerformed

    private void pButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton9ActionPerformed
        ArrayList<String> img = new ArrayList<>();
        img = Controller.getGame().getImg();
        if(img.size()>4){//prevent this button from triggering when there's no image for this button
            url = img.get(4);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo();
            //g = new AskCard(players,currentPlayer,url);
            //g.setVisible(true);
            //g.addAskButtonListener(new AskCardListener());
        }
    }//GEN-LAST:event_pButton9ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Win_LossScreen g = new Win_LossScreen();
        g.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void pAskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pAskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pAskActionPerformed

    private void jAskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAskActionPerformed
        if (card != null){//check for empty field
            System.out.println("current card rank: "+ card.getRankString());
            
            
            findMatch = Controller.getGame().isMatch(card, "computer1"); //change to the dropdwon value when working
            if(findMatch.equals("Go Fish")){
                System.out.println(findMatch); //debug, delete later
                this.c1Fish.setText(findMatch);
                // make deck accessable, maybe a boolean to lock/unlock it
                
            
            }else{
                this.c1Fish.setText("Match is found! Take another turn!");
                //maybe make the button reset to blank here
                refreshPlayerGUI();
                
            
            }
           
        }
        
    }//GEN-LAST:event_jAskActionPerformed
    void addHelpGameListener(ActionListener Listener){
        resetButtonGUI.addActionListener(Listener);        
    }
    void addCloseGameListener(ActionListener Listener){
        closeButtonGUI.addActionListener(Listener);
        
    }
    void addResetGameListener(ActionListener Listener){
        resetButtonGUI.addActionListener(Listener);
        
    }
    void addDeckListener(ActionListener Listener){
        deckButton.addActionListener(Listener);
        
    }
    void addHandListener1(ActionListener Listener){  
        pButton1.addActionListener(Listener);
    }
    void addHandListener2(ActionListener Listener){  
        pButton2.addActionListener(Listener);
    }
    void addHandListener3(ActionListener Listener){  
        pButton3.addActionListener(Listener);
    }
    void addHandListener4(ActionListener Listener){  
        pButton4.addActionListener(Listener);
    }
    void addHandListener5(ActionListener Listener){  
        pButton5.addActionListener(Listener);
    }
    void addHandListener6(ActionListener Listener){  
        pButton6.addActionListener(Listener);
    }
    void addHandListener7(ActionListener Listener){  
        pButton7.addActionListener(Listener);
    }
    void addHandListener8(ActionListener Listener){  
        pButton8.addActionListener(Listener);
    }
    void addHandListener9(ActionListener Listener){  
        pButton9.addActionListener(Listener);
    }
    void addHandListener10(ActionListener Listener){  
        pButton10.addActionListener(Listener);
    }
    void addHandListener11(ActionListener Listener){  
        pButton11.addActionListener(Listener);
    }
    void addHandListener12(ActionListener Listener){  
        pButton12.addActionListener(Listener);
    }
    void addHandListener13(ActionListener Listener){  
        pButton13.addActionListener(Listener);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel c1Fish;
    private javax.swing.JButton closeButtonGUI;
    private javax.swing.JButton deckButton;
    private javax.swing.JLabel deckCount;
    private javax.swing.JButton jAsk;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton menuButtonGUI;
    private javax.swing.JButton pAsk;
    private javax.swing.JButton pButton1;
    private javax.swing.JButton pButton10;
    private javax.swing.JButton pButton11;
    private javax.swing.JButton pButton12;
    private javax.swing.JButton pButton13;
    private javax.swing.JButton pButton2;
    private javax.swing.JButton pButton3;
    private javax.swing.JButton pButton4;
    private javax.swing.JButton pButton5;
    private javax.swing.JButton pButton6;
    private javax.swing.JButton pButton7;
    private javax.swing.JButton pButton8;
    private javax.swing.JButton pButton9;
    private javax.swing.JLabel pInfo;
    private javax.swing.JLabel pLabel1;
    private javax.swing.JLabel pLabel10;
    private javax.swing.JLabel pLabel11;
    private javax.swing.JLabel pLabel12;
    private javax.swing.JLabel pLabel13;
    private javax.swing.JLabel pLabel2;
    private javax.swing.JLabel pLabel3;
    private javax.swing.JLabel pLabel4;
    private javax.swing.JLabel pLabel5;
    private javax.swing.JLabel pLabel6;
    private javax.swing.JLabel pLabel7;
    private javax.swing.JLabel pLabel8;
    private javax.swing.JLabel pLabel9;
    private javax.swing.JButton resetButtonGUI;
    private javax.swing.JLabel viewPlayerTurn;
    // End of variables declaration//GEN-END:variables
}
