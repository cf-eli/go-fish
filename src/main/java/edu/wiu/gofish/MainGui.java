/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.wiu.gofish;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.JButton;
import javax.swing.JLabel;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/**
 *
 * @author Alex
 */
public class MainGui extends javax.swing.JFrame {
       
       //Game game = Controller.getGame();
        //hold list of player buttons
       ArrayList<JButton> pButtons = new ArrayList<JButton>();
       //hold list of play labels
       ArrayList<JLabel> pLabels = new ArrayList<JLabel>();
       String findMatch; //string that will hold match if found
       String url; //string that hold url 
       String currentPlayer; //string that will keep track of current player
       Card card; //hold card object
       boolean deckLock = true; // deck is locked if true, only put to false when its player's go fish phase
       boolean askLock = false; //lock for the ask button, starts off as open, then locks it after a go fish. opens every time gofish is hit afterwards
       String cpuresult;
       Card drawncard;
      // game.startGame();
    /**
     * Creates new form MainGui
     */
    public MainGui() {
       initComponents();
       //Player player1 = new Player("Player1");
       //Ai ai = new Ai();
       //populateButtons();
       //populateLabels();
       //game.startGame();
       //setButtonIcon();
       //setLabelText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        closeButtonGUI = new javax.swing.JButton();
        resetButtonGUI = new javax.swing.JButton();
        menuButtonGUI = new javax.swing.JButton();
        pButton8 = new javax.swing.JButton();
        pButton12 = new javax.swing.JButton();
        pButton11 = new javax.swing.JButton();
        pButton10 = new javax.swing.JButton();
        pButton7 = new javax.swing.JButton();
        pButton6 = new javax.swing.JButton();
        pButton5 = new javax.swing.JButton();
        pButton4 = new javax.swing.JButton();
        pButton3 = new javax.swing.JButton();
        pButton2 = new javax.swing.JButton();
        deckButton = new javax.swing.JButton();
        deckLabel = new javax.swing.JLabel();
        pButton13 = new javax.swing.JButton();
        pButton1 = new javax.swing.JButton();
        pButton9 = new javax.swing.JButton();
        pAsk = new javax.swing.JLabel();
        askTarget = new javax.swing.JComboBox<>();
        asked_for_info = new javax.swing.JLabel();
        ask_name = new javax.swing.JLabel();
        askcurrentplayer = new javax.swing.JLabel();
        score_graphic_view0 = new javax.swing.JLabel();
        score_graphic_view1 = new javax.swing.JLabel();
        score_graphic_view2 = new javax.swing.JLabel();
        score_graphic_view3 = new javax.swing.JLabel();
        scoreLabel0 = new javax.swing.JLabel();
        scoreLabel1 = new javax.swing.JLabel();
        cpu1Deck = new javax.swing.JLabel();
        cpu1Score = new javax.swing.JLabel();
        cpu1Name = new javax.swing.JLabel();
        cpu1HandCount = new javax.swing.JLabel();
        playerScore = new javax.swing.JLabel();
        playerName = new javax.swing.JLabel();
        deckCount = new javax.swing.JLabel();
        next_turn = new javax.swing.JButton();
        gofish_confirm = new javax.swing.JButton();
        viewPlayerTurn = new javax.swing.JLabel();
        drawn_card_graphic0 = new javax.swing.JLabel();
        drawn_card_graphic1 = new javax.swing.JLabel();
        drawn_card_graphic2 = new javax.swing.JLabel();
        drawn_card_info = new javax.swing.JLabel();
        drawn_name = new javax.swing.JLabel();
        ptarget_info = new javax.swing.JLabel();
        pLabel1 = new javax.swing.JLabel();
        pLabel6 = new javax.swing.JLabel();
        pLabel3 = new javax.swing.JLabel();
        pLabel13 = new javax.swing.JLabel();
        pLabel2 = new javax.swing.JLabel();
        pLabel5 = new javax.swing.JLabel();
        pLabel4 = new javax.swing.JLabel();
        pLabel12 = new javax.swing.JLabel();
        pLabel11 = new javax.swing.JLabel();
        pLabel10 = new javax.swing.JLabel();
        pLabel9 = new javax.swing.JLabel();
        pLabel8 = new javax.swing.JLabel();
        pLabel7 = new javax.swing.JLabel();
        pInfo = new javax.swing.JLabel();
        c1Fish = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        closeButtonGUI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/X_Button.png"))); // NOI18N
        closeButtonGUI.setBorderPainted(false);
        closeButtonGUI.setContentAreaFilled(false);
        closeButtonGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonGUIActionPerformed(evt);
            }
        });
        jPanel1.add(closeButtonGUI, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 0, 40, 40));

        resetButtonGUI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/Reset Button.png"))); // NOI18N
        resetButtonGUI.setToolTipText("");
        resetButtonGUI.setBorderPainted(false);
        resetButtonGUI.setContentAreaFilled(false);
        resetButtonGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonGUIActionPerformed(evt);
            }
        });
        jPanel1.add(resetButtonGUI, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 40, 40, 40));

        menuButtonGUI.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/Menu_Button.png"))); // NOI18N
        menuButtonGUI.setBorderPainted(false);
        menuButtonGUI.setContentAreaFilled(false);
        menuButtonGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonGUIActionPerformed(evt);
            }
        });
        jPanel1.add(menuButtonGUI, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 80, 40, 40));

        pButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/1h.png"))); // NOI18N
        pButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 560, 70, 90));

        pButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton12ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 560, 70, 90));

        pButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton11ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 560, 70, 90));

        pButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton10ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 560, 70, 90));

        pButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/11h.png"))); // NOI18N
        pButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 560, 70, 90));

        pButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/10c.png"))); // NOI18N
        pButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 560, 70, 90));

        pButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 560, 70, 90));

        pButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 560, 70, 90));

        pButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 560, 70, 90));

        pButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 560, 70, 90));

        deckButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        deckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deckButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 350, 70, 90));

        deckLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(deckLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 350, -1, 90));

        pButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton13ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 560, 70, 90));

        pButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 560, 70, 90));

        pButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pButton9ActionPerformed(evt);
            }
        });
        jPanel1.add(pButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 560, 70, 90));

        pAsk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(pAsk, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 270, 70, 90));

        askTarget.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        askTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                askTargetActionPerformed(evt);
            }
        });
        jPanel1.add(askTarget, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 400, -1, -1));

        asked_for_info.setForeground(new java.awt.Color(255, 255, 255));
        asked_for_info.setText("for a:");
        jPanel1.add(asked_for_info, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 250, -1, -1));

        ask_name.setForeground(new java.awt.Color(255, 255, 255));
        ask_name.setText("NAME");
        jPanel1.add(ask_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 230, -1, -1));

        askcurrentplayer.setForeground(new java.awt.Color(255, 255, 255));
        askcurrentplayer.setText("Currentai");
        jPanel1.add(askcurrentplayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 210, -1, -1));

        score_graphic_view0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(score_graphic_view0, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, -1, -1));

        score_graphic_view1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(score_graphic_view1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 380, -1, -1));

        score_graphic_view2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(score_graphic_view2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 380, -1, -1));

        score_graphic_view3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(score_graphic_view3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 380, -1, -1));

        scoreLabel0.setText("NAME");
        jPanel1.add(scoreLabel0, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 330, -1, -1));

        scoreLabel1.setText("Score +1");
        jPanel1.add(scoreLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, -1, -1));

        cpu1Deck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(cpu1Deck, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, -1, -1));

        cpu1Score.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cpu1Score.setForeground(new java.awt.Color(255, 255, 255));
        cpu1Score.setText("Score: 0");
        jPanel1.add(cpu1Score, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, -1, -1));

        cpu1Name.setForeground(new java.awt.Color(255, 255, 255));
        cpu1Name.setText("NAME");
        jPanel1.add(cpu1Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, -1, -1));

        cpu1HandCount.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cpu1HandCount.setForeground(new java.awt.Color(255, 255, 255));
        cpu1HandCount.setText("5");
        jPanel1.add(cpu1HandCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, -1, -1));

        playerScore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        playerScore.setForeground(new java.awt.Color(255, 255, 255));
        playerScore.setText("Score: 0");
        jPanel1.add(playerScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 510, -1, -1));

        playerName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        playerName.setForeground(new java.awt.Color(255, 255, 255));
        playerName.setText("NAME");
        jPanel1.add(playerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 510, -1, -1));

        deckCount.setForeground(new java.awt.Color(255, 255, 255));
        deckCount.setText("Deck Count: 45");
        jPanel1.add(deckCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 320, -1, -1));

        next_turn.setText("Next Turn");
        next_turn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                next_turnActionPerformed(evt);
            }
        });
        jPanel1.add(next_turn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 480, 100, -1));

        gofish_confirm.setText("GO FISH");
        gofish_confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gofish_confirmActionPerformed(evt);
            }
        });
        jPanel1.add(gofish_confirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 480, 100, -1));

        viewPlayerTurn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        viewPlayerTurn.setForeground(new java.awt.Color(255, 255, 255));
        viewPlayerTurn.setText("Player Turn:");
        jPanel1.add(viewPlayerTurn, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 10, -1, -1));

        drawn_card_graphic0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(drawn_card_graphic0, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 270, 70, 90));

        drawn_card_graphic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(drawn_card_graphic1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 270, 70, 90));

        drawn_card_graphic2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png"))); // NOI18N
        jPanel1.add(drawn_card_graphic2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 270, 70, 90));

        drawn_card_info.setBackground(new java.awt.Color(255, 255, 255));
        drawn_card_info.setForeground(new java.awt.Color(255, 255, 255));
        drawn_card_info.setText("You Drew:");
        jPanel1.add(drawn_card_info, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 250, -1, -1));

        drawn_name.setForeground(new java.awt.Color(255, 255, 255));
        drawn_name.setText("NAME:");
        jPanel1.add(drawn_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 230, -1, -1));

        ptarget_info.setForeground(new java.awt.Color(255, 255, 255));
        ptarget_info.setText("Target:");
        jPanel1.add(ptarget_info, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 380, -1, -1));

        pLabel1.setForeground(new java.awt.Color(255, 255, 255));
        pLabel1.setText("3");
        jPanel1.add(pLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 540, 10, -1));

        pLabel6.setForeground(new java.awt.Color(255, 255, 255));
        pLabel6.setText("3");
        jPanel1.add(pLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 540, 10, -1));

        pLabel3.setForeground(new java.awt.Color(255, 255, 255));
        pLabel3.setText("3");
        jPanel1.add(pLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 540, 10, -1));

        pLabel13.setForeground(new java.awt.Color(255, 255, 255));
        pLabel13.setText("2");
        jPanel1.add(pLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 540, -1, -1));

        pLabel2.setForeground(new java.awt.Color(255, 255, 255));
        pLabel2.setText("3");
        jPanel1.add(pLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 540, 10, -1));

        pLabel5.setForeground(new java.awt.Color(255, 255, 255));
        pLabel5.setText("2");
        jPanel1.add(pLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 540, -1, -1));

        pLabel4.setForeground(new java.awt.Color(255, 255, 255));
        pLabel4.setText("2");
        jPanel1.add(pLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 540, -1, -1));

        pLabel12.setForeground(new java.awt.Color(255, 255, 255));
        pLabel12.setText("2");
        jPanel1.add(pLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 540, -1, -1));

        pLabel11.setForeground(new java.awt.Color(255, 255, 255));
        pLabel11.setText("2");
        jPanel1.add(pLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 540, -1, -1));

        pLabel10.setForeground(new java.awt.Color(255, 255, 255));
        pLabel10.setText("2");
        jPanel1.add(pLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 540, -1, -1));

        pLabel9.setForeground(new java.awt.Color(255, 255, 255));
        pLabel9.setText("2");
        jPanel1.add(pLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 540, -1, -1));

        pLabel8.setForeground(new java.awt.Color(255, 255, 255));
        pLabel8.setText("2");
        jPanel1.add(pLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 540, -1, -1));

        pLabel7.setForeground(new java.awt.Color(255, 255, 255));
        pLabel7.setText("2");
        jPanel1.add(pLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 540, -1, -1));

        pInfo.setForeground(new java.awt.Color(255, 255, 255));
        pInfo.setText("pinfo");
        jPanel1.add(pInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 660, -1, -1));

        c1Fish.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        c1Fish.setForeground(new java.awt.Color(255, 255, 255));
        c1Fish.setText("c1Fish");
        jPanel1.add(c1Fish, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 450, -1, 20));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/Gofishbackground.png"))); // NOI18N
        jPanel1.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 700));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Set the urlIcon  of each button associated with the cards in player hands accordingly
   //set the button icon for each card in the player hand
    public void setButtonIcon(){
        ArrayList<String> img = new ArrayList<>();
        //img = Controller.getGame().getImg();
        img = Controller.getGame().getImg();
        int i;
        for (i = 0; i<img.size();i++){
            pButtons.get(i).setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + img.get(i)))); 
        }
        for(i = i;i<13;i++){//set the rest of the hand with background images
            pButtons.get(i).setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/Gofishbackground.png")));
        }
    
    }
    //Set the label each text associated with the player hand  accordingly
    public void setLabelText(){
        ArrayList<Integer> freq = new ArrayList<>();
        freq = Controller.getGame().getFreq();
        int i;
        for (i=0;i<freq.size();i++){
            pLabels.get(i).setText("" + freq.get(i));
        }
        for (i=i;i<13;i++){
            pLabels.get(i).setText("");
        }
    }
    public void setPoints(){//set points only does player atm, add for ai
        
        switch(Controller.getGame().getPlayerCount()){
            case 2:
                this.playerScore.setText("Score: "+Controller.getGame().getPlayer(0).getScore());
                this.cpu1Score.setText("Score: "+Controller.getGame().getPlayer(1).getScore());
                break;
            case 3:
                this.playerScore.setText("Score: "+Controller.getGame().getPlayer(0).getScore());
                this.cpu1Score.setText("Score: "+Controller.getGame().getPlayer(1).getScore());
                //this.cpu2Score.setText("Score: "+Controller.getGame().getPlayer(2).getScore());
                break;
            case 4:
                this.playerScore.setText("Score: "+Controller.getGame().getPlayer(0).getScore());
                this.cpu1Score.setText("Score: "+Controller.getGame().getPlayer(1).getScore());
                //this.cpu2Score.setText("Score: "+Controller.getGame().getPlayer(2).getScore());
                //this.cpu3Score.setText("Score: "+Controller.getGame().getPlayer(3).getScore());
                break;
               
            default:
                System.out.println("Wrong Player size. ERROR");
                break;
        }
        /*ArrayList<Integer> points = new ArrayList<>();
        for(int i =0;i<Controller.getGame().getPlayerCount();i++){
            points.add(Controller.getGame().getPlayer(i).getScore());
        }*/
    }
    //Set text to current player turn
    public void setViewPlayerTurn(){
        this.viewPlayerTurn.setText("Current Turn: "+ Controller.getGame().getCurrentTurnName());
    }
    //set deck count to current cpu size
    public void setDeckCount(){
        this.deckCount.setText("Deck Count: "+ Controller.getGame().getDeck().getSize());
    
    }
    //set the cpu hand
    public void setCpuHand(){
        switch(Controller.getGame().getPlayerCount()){
            case 2: 
                this.cpu1HandCount.setText(String.valueOf(Controller.getGame().getPlayer(1).getAmountInHand()));
                break;
            case 3:
                this.cpu1HandCount.setText(String.valueOf(Controller.getGame().getPlayer(1).getAmountInHand()));
                //this.cpu2HandCount.setText(String.valueOf(Controller.getGame().getPlayer(1).getAmountInHand()));                
                break;
            case 4:
                this.cpu1HandCount.setText(String.valueOf(Controller.getGame().getPlayer(1).getAmountInHand()));
                //this.cpu2HandCount.setText(String.valueOf(Controller.getGame().getPlayer(2).getAmountInHand()));
                //this.cpu3HandCount.setText(String.valueOf(Controller.getGame().getPlayer(3).getAmountInHand()));
                break;
            default: 
                System.out.println("Wrong player size, ERROR");
                break;
        }
    }
    //set names for ai
    public void setNames(){
        switch(Controller.getGame().getPlayerCount()){
            case 2: 
                this.playerName.setText(Controller.getGame().getPlayer(0).getName());
                this.cpu1Name.setText(Controller.getGame().getPlayer(1).getName());
                break;
            case 3:
                this.playerName.setText(Controller.getGame().getPlayer(0).getName());
                this.cpu1Name.setText(Controller.getGame().getPlayer(1).getName());
                //this.cpu2Name.setText(Controller.getGame().getPlayer(2).getName());
                break;
            case 4:
                this.playerName.setText(Controller.getGame().getPlayer(0).getName());
                this.cpu1Name.setText(Controller.getGame().getPlayer(1).getName());
                //this.cpu2Name.setText(Controller.getGame().getPlayer(2).getName());
                //this.cpu3Name.setText(Controller.getGame().getPlayer(3).getName());
                break;
            default: 
                System.out.println("Wrong player size, ERROR");
                break;
    
        }
    }
    //set deck toggle
    public void deckLockToggle(){
        this.deckLock = this.deckLock != true;
    
    }
    //asklock toggle
    public void askLockToggle(){
        this.askLock = this.askLock != true;
    
    }
    //refreshplayergui after every turn
    public void refreshPlayerGUI(){
        setButtonIcon();
        setLabelText();
        setPoints();
        setViewPlayerTurn();
        setDeckCount();
        setCpuHand();
        
    }
    
    //this is run once, at the start of the game OR maybe reset of the game
    public void beginGame(){
       
        //setVisible(true);
        populateButtons();
        populateLabels(); 
        populateDropdown();
        
        setButtonIcon();
        setLabelText();
        setPoints();
        setViewPlayerTurn();
        setDeckCount();
        setNames();
        this.gofish_confirm.setVisible(false);
        this.pInfo.setText("Select a card to ask!");
        this.c1Fish.setText("");
        this.next_turn.setVisible(false);
        this.drawn_card_info.setVisible(false);
        this.drawn_card_graphic0.setVisible(false);
        this.drawn_card_graphic1.setVisible(false);
        this.drawn_card_graphic2.setVisible(false);
        this.pAsk.setVisible(false);
        this.ask_name.setVisible(false);
        this.asked_for_info.setVisible(false);
        this.drawn_name.setVisible(false);
        this.askcurrentplayer.setVisible(false);
        this.clearScoreCards();
    
    }

    public void getButtonImg(int place){
        ArrayList<String> img = new ArrayList<>();
        img = Controller.getGame().getImg();
        if(img.size()>place){
            url = img.get(place);
            card = Controller.getGame().createCard(url);
            ArrayList<String> players = new ArrayList<>(Controller.getGame().getCurrentPlayers());
            currentPlayer = Controller.getGame().getWhoAsked(); 
            System.out.println(currentPlayer);
            showInfo(); 
        }
    }
    //add buttons to array
    public void populateButtons(){
        pButtons.add(pButton7);//0
        pButtons.add(pButton6);//1
        pButtons.add(pButton8);//2
        pButtons.add(pButton5);//3
        pButtons.add(pButton9);//4
        pButtons.add(pButton4);//5
        pButtons.add(pButton10);//6
        pButtons.add(pButton3);//7
        pButtons.add(pButton11);//8
        pButtons.add(pButton2);//9
        pButtons.add(pButton12);//10
        pButtons.add(pButton1);//11
        pButtons.add(pButton13);//12
    }
    //add labels to array
    public void populateLabels(){
        pLabels.add(pLabel7);
        pLabels.add(pLabel6);
        pLabels.add(pLabel8);
        pLabels.add(pLabel5);
        pLabels.add(pLabel9);
        pLabels.add(pLabel4);
        pLabels.add(pLabel10);
        pLabels.add(pLabel3);
        pLabels.add(pLabel11);
        pLabels.add(pLabel2);
        pLabels.add(pLabel12);
        pLabels.add(pLabel1);
        pLabels.add(pLabel13);
    }
    
    
    //show what card player is asking for
    public void showInfo(){
        /* broke this up into a separate method, commenting out incase it's needed later
        ArrayList<String> players = Controller.getGame().getCurrentPlayers();
        String [] model = new String[players.size()-1];//minus 1 to remove player name
        for(int i = 0;i<players.size()-1;i++){//starts at 1 to skip player name
            model[i] = players.get(i+1);
        }
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(model));*/
        
        
        
        //pInfo.setText(currentPlayer +" is asking");
        //playerAsk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + url)));
    }
    //show what card cpu is asking for
    public void showCInfo(){
        //pInfo.setText(currentPlayer +" is asking");
        pAsk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + url)));
    
    
    }
    
    //populates the dropdown menu for asking options
    public void populateDropdown(){
        ArrayList<String> players = Controller.getGame().getCurrentPlayers();
        String [] model = new String[players.size()-1];//minus 1 to remove player name
        for(int i = 0;i<players.size()-1;i++){//starts at 1 to skip player name
            model[i] = players.get(i+1);
        }
        askTarget.setModel(new javax.swing.DefaultComboBoxModel<>(model));           
    }
    //checks for a winner
    public void winnerCheck(){
        
        int handcheck = Controller.getGame().checkHand();
        if (handcheck == 1){
            this.displayScoreCards();
        
        }else{
            this.clearScoreCards();
        
        }
        
        switch(Controller.getGame().checkGameOver()){
            case 1: {
                //this should be for point win
                Controller.getWin_Loss().setVisible(true);
                Controller.getWin_Loss().setMainLabel("Win by Points!");
                Controller.getWin_Loss().setWinner("Winner :"+Controller.getGame().getWinner());
                break;


            }
            case 2: {
                //this should be for if someone loses by no cards
                Controller.getWin_Loss().setVisible(true);
                Controller.getWin_Loss().setMainLabel("No More Cards!");
                Controller.getWin_Loss().setWinner("Winner :"+Controller.getGame().getWinner());
                break;

            }
            case 3:{
                Controller.getWin_Loss().setVisible(true);
                Controller.getWin_Loss().setMainLabel("No More Cards!");
                Controller.getWin_Loss().setWinner("Winner :"+Controller.getGame().getWinner());
            
            }
        }
    
    }
    
    //checks the current target of the AI, then used the recently lost array to show cards that were lost
    //should only be for player
    public void showMatchedPlayer(){
        //check the size of how many cards were lost
        switch(((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrent_Target().getRecently_Lost().size()){

            //if one card is lost
            case 1 : {
                //set the picture to that card lost
                this.drawn_name.setVisible(true);
                this.drawn_name.setText(Controller.getGame().getCurrentPlayers().get(0));
                this.drawn_card_info.setText("Lost:");
                this.drawn_card_graphic0.setVisible(true);
                this.drawn_card_graphic0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(0).getRecently_Lost().get(0).getImg())));
                break;
            }
            //if 2 cards are lost
            case 2 : {
                this.drawn_name.setVisible(true);
                this.drawn_name.setText(Controller.getGame().getCurrentPlayers().get(0));
                this.drawn_card_info.setText("Lost:");
                this.drawn_card_graphic0.setVisible(true);
                this.drawn_card_graphic1.setVisible(true);
                this.drawn_card_graphic0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(0).getRecently_Lost().get(0).getImg())));
                this.drawn_card_graphic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(0).getRecently_Lost().get(1).getImg())));
                break;
            }
            //if 3 cards are lost
            case 3 : {
                this.drawn_name.setVisible(true);
                this.drawn_name.setText(Controller.getGame().getCurrentPlayers().get(0));
                this.drawn_card_info.setText("Lost:");
                this.drawn_card_graphic0.setVisible(true);
                this.drawn_card_graphic1.setVisible(true);
                this.drawn_card_graphic2.setVisible(true);
                this.drawn_card_graphic0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(0).getRecently_Lost().get(0).getImg())));
                this.drawn_card_graphic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(0).getRecently_Lost().get(1).getImg())));
                this.drawn_card_graphic2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(0).getRecently_Lost().get(2).getImg())));
                break;
            }
    
    
        }
    }
    //for when the player gets cards from an AI specifically 
    public void showMatchedAi(){
        
        switch (Controller.getGame().getCurrentTurnPlayer().getLast_Ai_Target().getRecently_Lost().size()){
             case 1 : {
                //set the picture to that card lost
                this.drawn_name.setVisible(true);
                this.drawn_card_info.setVisible(true);
                this.drawn_name.setText(Controller.getGame().getCurrentTurnName());
                this.drawn_card_info.setText("Gained:");
                this.drawn_card_graphic0.setVisible(true);
                this.drawn_card_graphic0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(1).getRecently_Lost().get(0).getImg())));
                break;
            }
            //if 2 cards are lost
            case 2 : {
                this.drawn_name.setVisible(true);
                this.drawn_card_info.setVisible(true);
                this.drawn_name.setText(Controller.getGame().getCurrentTurnName());
                this.drawn_card_info.setText("Gained:");
                this.drawn_card_graphic0.setVisible(true);
                this.drawn_card_graphic1.setVisible(true);
                this.drawn_card_graphic0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(1).getRecently_Lost().get(0).getImg())));
                this.drawn_card_graphic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(1).getRecently_Lost().get(1).getImg())));
                break;
            }
            //if 3 cards are lost
            case 3 : {
                this.drawn_name.setVisible(true);
                this.drawn_card_info.setVisible(true);
                this.drawn_name.setText(Controller.getGame().getCurrentTurnName());
                this.drawn_card_info.setText("Gained:");
                this.drawn_card_graphic0.setVisible(true);
                this.drawn_card_graphic1.setVisible(true);
                this.drawn_card_graphic2.setVisible(true);
                this.drawn_card_graphic0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(1).getRecently_Lost().get(0).getImg())));
                this.drawn_card_graphic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(1).getRecently_Lost().get(1).getImg())));
                this.drawn_card_graphic2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getPlayers().get(1).getRecently_Lost().get(2).getImg())));
                break;
            }
            
        
        
        
        }
    
    
    
    
    
    
    }
    public void clearLostView(){
        this.drawn_card_graphic0.setVisible(false);
        this.drawn_card_graphic1.setVisible(false);
        this.drawn_card_graphic2.setVisible(false);
        this.drawn_card_info.setVisible(false);
        this.drawn_name.setVisible(false);
        
    
    
    }
    
    public void displayScoreCards(){
        //if the current turn player is player1
        if(Controller.getGame().getCurrentTurnPlayer() == Controller.getGame().getPlayers().get(0)){
            //Controller.getGame().getCurrentTurnPlayer().getRecently_Scored().get(0).getImg()
            
            //set the cards
            this.score_graphic_view0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getCurrentTurnPlayer().getRecently_Scored().get(0).getImg())));
            this.score_graphic_view1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getCurrentTurnPlayer().getRecently_Scored().get(1).getImg())));
            this.score_graphic_view2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getCurrentTurnPlayer().getRecently_Scored().get(2).getImg())));
            this.score_graphic_view3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + Controller.getGame().getCurrentTurnPlayer().getRecently_Scored().get(3).getImg())));
            
            //set the text messages
            this.scoreLabel0.setText(Controller.getGame().getCurrentTurnName());
            
            
            
            //display the interface
            this.scoreLabel0.setVisible(true);
            this.scoreLabel1.setVisible(true);
            this.score_graphic_view0.setVisible(true);
            this.score_graphic_view1.setVisible(true);
            this.score_graphic_view2.setVisible(true);
            this.score_graphic_view3.setVisible(true);
            
            
            
        
        
        
        
        }else{
            
            this.score_graphic_view0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png")));
            this.score_graphic_view1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png")));
            this.score_graphic_view2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png")));
            this.score_graphic_view3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card/back.png")));
            
            this.scoreLabel0.setText(Controller.getGame().getCurrentTurnName());
        
            this.scoreLabel0.setVisible(true);
            this.scoreLabel1.setVisible(true);
            this.score_graphic_view0.setVisible(true);
            this.score_graphic_view1.setVisible(true);
            this.score_graphic_view2.setVisible(true);
            this.score_graphic_view3.setVisible(true);
        
        
        }
    
    
    }
    
    public void clearScoreCards(){
        this.scoreLabel0.setVisible(false);
        this.scoreLabel1.setVisible(false);
        this.score_graphic_view0.setVisible(false);
        this.score_graphic_view1.setVisible(false);
        this.score_graphic_view2.setVisible(false);
        this.score_graphic_view3.setVisible(false);
    
    
    }
    
    
    public void playeraskAction(){
        
        if (card != null && this.askLock == false){//check for empty field and player turn
            this.pInfo.setText("");
            
            System.out.println("current card rank: "+ card.getRankString());

            findMatch = Controller.getGame().isMatch(card, "computer1", Controller.getGame()); //change to the dropdwon value when working
            
            if(findMatch.equals("Go Fish")){
                System.out.println(findMatch); //debug, delete later
                this.c1Fish.setText("Go Fish, draw from the pile.");
                // make deck accessable, maybe a boolean to lock/unlock it
                //deckLock=false;
                this.deckLockToggle();
                this.askLockToggle();


            }else{
                this.c1Fish.setText("Match is found! Take another turn!");
                this.pInfo.setText("Select another card");
                //maybe make the button reset to blank here
                //Controller.getGame().checkHand();
                
                //display lost cards
                this.showMatchedAi();
                //check for winner
                this.winnerCheck();
                
                refreshPlayerGUI();
                System.out.println("current player hand:"+Controller.getGame().getPlayer(0).getHand().size());
                System.out.println("current cpu hand:"+Controller.getGame().getPlayer(1).getHand().size());
                System.out.println("current Player hand: "+Controller.getGame().getPlayer(0).getHand().toString());
                System.out.println("Current CPU hand: "+Controller.getGame().getPlayer(1).getHand().toString());
            

            }
        }
        
    
    
    
    
    
    
    }
    
    
    private void menuButtonGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonGUIActionPerformed
        // TODO add your handling code here:
//        HelpScreen g = new HelpScreen();
//       // g.setVisible(true);
    }//GEN-LAST:event_menuButtonGUIActionPerformed

    private void resetButtonGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonGUIActionPerformed
        // TODO add your handling code here:
//        MainGui g = new MainGui();
//        g.setVisible(true);
//        dispose();
        
        //prolly need to reset deck and hands later lol
    }//GEN-LAST:event_resetButtonGUIActionPerformed

    private void pButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton8ActionPerformed
        this.clearLostView();
        getButtonImg(2);
        this.playeraskAction();
    }//GEN-LAST:event_pButton8ActionPerformed

    private void pButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton12ActionPerformed
        this.clearLostView();
        getButtonImg(10);
        this.playeraskAction();
    }//GEN-LAST:event_pButton12ActionPerformed

    private void pButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton11ActionPerformed
        this.clearLostView();
        getButtonImg(8);
        this.playeraskAction();
    }//GEN-LAST:event_pButton11ActionPerformed

    private void pButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton10ActionPerformed
        this.clearLostView();
        getButtonImg(6);
        this.playeraskAction();
    }//GEN-LAST:event_pButton10ActionPerformed

    private void pButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton7ActionPerformed
        this.clearLostView();
        getButtonImg(0);
        this.playeraskAction();
    }//GEN-LAST:event_pButton7ActionPerformed

    private void pButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton6ActionPerformed
        this.clearLostView();
        getButtonImg(1);
        this.playeraskAction();
    }//GEN-LAST:event_pButton6ActionPerformed

    private void pButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton5ActionPerformed
        this.clearLostView();
        getButtonImg(3);
        this.playeraskAction();
    }//GEN-LAST:event_pButton5ActionPerformed

    private void pButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton4ActionPerformed
        this.clearLostView();
        getButtonImg(5);
        this.playeraskAction();
    }//GEN-LAST:event_pButton4ActionPerformed

    private void pButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton3ActionPerformed
        this.clearLostView();
        getButtonImg(7);
        this.playeraskAction();
    }//GEN-LAST:event_pButton3ActionPerformed

    private void pButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton2ActionPerformed
        this.clearLostView();
        getButtonImg(9);
        this.playeraskAction();
    }//GEN-LAST:event_pButton2ActionPerformed

    private void deckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deckButtonActionPerformed
        
        //TODO might just combine this with the winnercheck
        //if decksize is not equal to 0, set player to next and refresh UI
        if(Controller.getGame().getDeck().getSize()!=0 && deckLock != true){
            //COMMENTING THIS OUT FOR DEBUGGING
            this.drawncard = Controller.getGame().setNextPlayerTurn();
            //TURN THIS BACK ON WHEN DONE
            refreshPlayerGUI();
            //deckLock = true;
            //COMMENTING THIS OUT FOR DEBUGGING:
            this.deckLockToggle();
            //TURN THIS BACK ON WHEN DONE
            //debugging, delete later
            System.out.println("current player hand:"+Controller.getGame().getPlayer(0).getHand().size());
            System.out.println("current cpu hand:"+Controller.getGame().getPlayer(1).getHand().size()); 
            // debugging end
            
            
            refreshPlayerGUI();
            
            //TODO might just combine this with the winnercheck
            //Controller.getGame().checkHand();
            //check for winner
            this.winnerCheck();
            
            this.c1Fish.setText("");
            
            //turn the buttons off until need them again (after a computer go fish)
            this.deckButton.setVisible(false);
            this.askTarget.setVisible(false);
            this.ptarget_info.setVisible(false);
            this.next_turn.setVisible(true);
            this.url = null;
            this.card = null;
            
            
            //updating drawn card info
            this.drawn_card_info.setText("You Drew:");
            this.drawn_card_info.setVisible(true);
            this.drawn_card_graphic0.setVisible(true);
            this.drawn_card_graphic0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/card" + this.drawncard.getImg())));
            
            
            
            
        }
    }//GEN-LAST:event_deckButtonActionPerformed

    private void pButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton13ActionPerformed
        this.clearLostView();
        getButtonImg(12);
        this.playeraskAction();
    }//GEN-LAST:event_pButton13ActionPerformed

    private void pButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton1ActionPerformed
        this.clearLostView();
        getButtonImg(11);
        this.playeraskAction();
    }//GEN-LAST:event_pButton1ActionPerformed

    private void closeButtonGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonGUIActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeButtonGUIActionPerformed

    private void pButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pButton9ActionPerformed
        this.clearLostView();
        getButtonImg(4);
        this.playeraskAction();
    }//GEN-LAST:event_pButton9ActionPerformed

    private void gofish_confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gofish_confirmActionPerformed
        //will need extra if statements for AI handleing multiple people

        //if the returned value from the AI is go fish
        if(this.cpuresult.equals("Go Fish")){
            
            //gofish() automatically sets the next turn
            Controller.getGame().goFish();
            
            
            //check for winner
            this.winnerCheck();
            
            //gui elements
            this.deckButton.setVisible(true);
            this.askTarget.setVisible(true);
            this.ptarget_info.setVisible(true);
            
            this.askcurrentplayer.setVisible(false);
            this.asked_for_info.setVisible(false);
            this.ask_name.setVisible(false);
            this.pAsk.setVisible(false);
            
            this.askLockToggle();
            this.gofish_confirm.setVisible(false);
            this.c1Fish.setText("Computer Drew a Card");
            this.pInfo.setText("Select a new card to ask!");
            //this.pInfo.setText("");
            
            
        //if a match is found, this will run instead:
        }else{
            //need a message to say what happened
            
            //runs the AI again, this should happen until it doesnt get a match
            cpuresult = ((Ai)Controller.getGame().getCurrentTurnPlayer()).runAi(Controller.getGame());
            url = ((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrentCard().getImg();
            
            //show the result to gui:
            this.showMatchedPlayer();
            
            
            if (this.cpuresult.equals("Go Fish")){
                this.gofish_confirm.setText("GO FISH");
                this.c1Fish.setText("Computer Drew a Card");
                this.pInfo.setText("No match found. Press Go Fish to Continue.");
                this.drawn_card_graphic0.setVisible(false);
                this.drawn_card_graphic1.setVisible(false);
                this.drawn_card_graphic2.setVisible(false);
                this.drawn_card_info.setVisible(false);
                this.drawn_name.setVisible(false);
                
            
            }
            
            showCInfo();
            
            //check the hands for scores
            //Controller.getGame().checkHand();
            //check for game over
            this.winnerCheck();
            
            refreshPlayerGUI();
            
                /*this.c1Fish.setText(Controller.getGame().getCurrentTurnPlayer().getName() 
                + " asked " + ((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrent_Target() + " for a "
                + ((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrentCard().toString());*/
            
        
        
        }
        System.out.println(Controller.getGame().getCurrentTurn());
        refreshPlayerGUI();
        
        
        /*
        Win_LossScreen g = new Win_LossScreen();
        g.setVisible(true);*/
    }//GEN-LAST:event_gofish_confirmActionPerformed

    private void next_turnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next_turnActionPerformed

        //sets a matched or go fish in cpuresult
        cpuresult = ((Ai)Controller.getGame().getCurrentTurnPlayer()).runAi(Controller.getGame());

        //sets the url to the currently selected card in AI class
        url = ((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrentCard().getImg();

        //debugging
        System.out.println("current player hand:"+Controller.getGame().getPlayer(0).getHand().size());
        System.out.println("current cpu hand:"+Controller.getGame().getPlayer(1).getHand().size());             

        //Controller.getGame().getPlayer(1).getImg().get()
        //Controller.getGame().setSpecificTurnplayer();
        //debugging
        /*this.c1Fish.setText(Controller.getGame().getCurrentTurnPlayer().getName() 
                + " is asking " + ((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrent_Target() + " for a "
                + ((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrentCard().toString());*/
        showCInfo();
        refreshPlayerGUI();
        this.pAsk.setVisible(true);
        this.askcurrentplayer.setVisible(true);
        this.asked_for_info.setVisible(true);
        this.ask_name.setVisible(true);
        this.askcurrentplayer.setText(Controller.getGame().getCurrentTurnName()+" asked");
        this.ask_name.setText(((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrent_Target().getName());
        this.asked_for_info.setText("for:");
        
        
        //next, need to have the player handle the ask. use the cpuresult for if it says "Go Fish" or "Matched"
        //if the currentplayer target is == the player, do this
        if(((Ai)Controller.getGame().getCurrentTurnPlayer()).getCurrent_Target() == Controller.getGame().getPlayers().get(0)){
            if("Matched".equals(cpuresult)){
                
                
                //show the matched cards on gui
                this.showMatchedPlayer();
                    
                //gui actions
                this.pAsk.setVisible(true);
                this.gofish_confirm.setText("CONTINUE");
                this.gofish_confirm.setVisible(true);
                this.pInfo.setText("Match found, press continue");



            }else{
                
                this.drawn_card_graphic0.setVisible(false);
                this.drawn_card_info.setVisible(false);
                this.gofish_confirm.setText("GO FISH");
                this.gofish_confirm.setVisible(true);
                this.pInfo.setText("No match found, press GO FISH");



            }
        }
        this.winnerCheck();
        //Controller.getGame().checkHand();
        this.next_turn.setVisible(false);
        this.url = null;
    }//GEN-LAST:event_next_turnActionPerformed

    private void askTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_askTargetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_askTargetActionPerformed
    void addHelpGameListener(ActionListener Listener){
        menuButtonGUI.addActionListener(Listener);        
    }
    void addCloseGameListener(ActionListener Listener){
        closeButtonGUI.addActionListener(Listener);
        
    }
    void addResetGameListener(ActionListener Listener){
        resetButtonGUI.addActionListener(Listener);
        
    }
    void addDeckListener(ActionListener Listener){
        deckButton.addActionListener(Listener);
        
    }
    void addHandListener1(ActionListener Listener){  
        pButton1.addActionListener(Listener);
    }
    void addHandListener2(ActionListener Listener){  
        pButton2.addActionListener(Listener);
    }
    void addHandListener3(ActionListener Listener){  
        pButton3.addActionListener(Listener);
    }
    void addHandListener4(ActionListener Listener){  
        pButton4.addActionListener(Listener);
    }
    void addHandListener5(ActionListener Listener){  
        pButton5.addActionListener(Listener);
    }
    void addHandListener6(ActionListener Listener){  
        pButton6.addActionListener(Listener);
    }
    void addHandListener7(ActionListener Listener){  
        pButton7.addActionListener(Listener);
    }
    void addHandListener8(ActionListener Listener){  
        pButton8.addActionListener(Listener);
    }
    void addHandListener9(ActionListener Listener){  
        pButton9.addActionListener(Listener);
    }
    void addHandListener10(ActionListener Listener){  
        pButton10.addActionListener(Listener);
    }
    void addHandListener11(ActionListener Listener){  
        pButton11.addActionListener(Listener);
    }
    void addHandListener12(ActionListener Listener){  
        pButton12.addActionListener(Listener);
    }
    void addHandListener13(ActionListener Listener){  
        pButton13.addActionListener(Listener);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> askTarget;
    private javax.swing.JLabel ask_name;
    private javax.swing.JLabel askcurrentplayer;
    private javax.swing.JLabel asked_for_info;
    private javax.swing.JLabel background;
    private javax.swing.JLabel c1Fish;
    private javax.swing.JButton closeButtonGUI;
    private javax.swing.JLabel cpu1Deck;
    private javax.swing.JLabel cpu1HandCount;
    private javax.swing.JLabel cpu1Name;
    private javax.swing.JLabel cpu1Score;
    private javax.swing.JButton deckButton;
    private javax.swing.JLabel deckCount;
    private javax.swing.JLabel deckLabel;
    private javax.swing.JLabel drawn_card_graphic0;
    private javax.swing.JLabel drawn_card_graphic1;
    private javax.swing.JLabel drawn_card_graphic2;
    private javax.swing.JLabel drawn_card_info;
    private javax.swing.JLabel drawn_name;
    private javax.swing.JButton gofish_confirm;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton menuButtonGUI;
    private javax.swing.JButton next_turn;
    private javax.swing.JLabel pAsk;
    private javax.swing.JButton pButton1;
    private javax.swing.JButton pButton10;
    private javax.swing.JButton pButton11;
    private javax.swing.JButton pButton12;
    private javax.swing.JButton pButton13;
    private javax.swing.JButton pButton2;
    private javax.swing.JButton pButton3;
    private javax.swing.JButton pButton4;
    private javax.swing.JButton pButton5;
    private javax.swing.JButton pButton6;
    private javax.swing.JButton pButton7;
    private javax.swing.JButton pButton8;
    private javax.swing.JButton pButton9;
    private javax.swing.JLabel pInfo;
    private javax.swing.JLabel pLabel1;
    private javax.swing.JLabel pLabel10;
    private javax.swing.JLabel pLabel11;
    private javax.swing.JLabel pLabel12;
    private javax.swing.JLabel pLabel13;
    private javax.swing.JLabel pLabel2;
    private javax.swing.JLabel pLabel3;
    private javax.swing.JLabel pLabel4;
    private javax.swing.JLabel pLabel5;
    private javax.swing.JLabel pLabel6;
    private javax.swing.JLabel pLabel7;
    private javax.swing.JLabel pLabel8;
    private javax.swing.JLabel pLabel9;
    private javax.swing.JLabel playerName;
    private javax.swing.JLabel playerScore;
    private javax.swing.JLabel ptarget_info;
    private javax.swing.JButton resetButtonGUI;
    private javax.swing.JLabel scoreLabel0;
    private javax.swing.JLabel scoreLabel1;
    private javax.swing.JLabel score_graphic_view0;
    private javax.swing.JLabel score_graphic_view1;
    private javax.swing.JLabel score_graphic_view2;
    private javax.swing.JLabel score_graphic_view3;
    private javax.swing.JLabel viewPlayerTurn;
    // End of variables declaration//GEN-END:variables
}
